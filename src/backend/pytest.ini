# pytest.ini - Comprehensive testing configuration for Flask Migration Tutorial
# Replaces jest.config.js functionality with Python-based testing framework
# Enforces 100% coverage requirements and Flask application testing integration

[tool:pytest]
# Test Discovery Configuration
# Replaces Jest test file discovery patterns with Python conventions
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Coverage Configuration with 100% Enforcement
# Replaces Jest coverage enforcement with pytest-cov integration
addopts = 
    --strict-markers
    --strict-config
    --cov=src
    --cov-branch
    --cov-fail-under=100
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=json:coverage.json
    --junit-xml=junit.xml
    --html=pytest_report.html
    --self-contained-html
    -v
    --tb=short
    --capture=no
    --log-cli-level=INFO

# Pytest Markers Configuration
# Defines custom markers for test categorization and execution control
markers =
    unit: Unit tests for individual Flask components and functions
    integration: Integration tests for Flask application endpoints and workflows
    performance: Performance and benchmark tests using pytest-benchmark
    security: Security-focused tests for Flask application hardening
    smoke: Smoke tests for basic Flask application functionality
    slow: Tests that take longer than 1 second to execute
    flask: Flask-specific tests requiring application context
    wsgi: WSGI server lifecycle and deployment tests
    health: Health check and monitoring endpoint tests
    error: Error handling and exception scenario tests

# Logging Configuration
# Replaces Jest console output configuration with Python logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File-based logging for detailed test execution analysis
log_file = logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)s] %(name)s: %(funcName)s:%(lineno)d - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test Execution Configuration
# Optimizes test execution performance and parallel processing
timeout = 300
timeout_method = thread

# Minimum Python version requirement for Flask application compatibility
minversion = 7.0

# Configuration validation and warning management
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:flask.*
    ignore::PendingDeprecationWarning

# Required plugins for Flask testing ecosystem
# Ensures pytest-flask, pytest-cov, and pytest-html are available
required_plugins =
    pytest-flask>=1.3.0
    pytest-cov>=6.1.0
    pytest-html>=4.1.0

# Flask-specific testing configuration
# Environment variables for Flask testing mode
env =
    FLASK_ENV = testing
    TESTING = 1
    LOG_LEVEL = ERROR
    WTF_CSRF_ENABLED = False

# Performance and resource management
# Memory usage monitoring and test isolation
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL

# Test collection configuration
# Ensures comprehensive test discovery while excluding non-test files
collect_ignore = [
    "setup.py",
    "conftest.py",
    "build",
    "dist",
    ".tox",
    ".eggs",
    "venv",
    "__pycache__"
]

# Disable pytest warnings for cleaner output during CI/CD execution
disable_warnings = true

# Add custom test outcomes for Flask-specific scenarios
custom_outcomes = 
    FLASK_ERROR: Flask application error during test execution
    COVERAGE_FAIL: Code coverage below 100% threshold
    PERFORMANCE_FAIL: Performance benchmark failure

# Documentation and reporting enhancement
# Provides detailed test execution metadata for debugging and analysis
console_output_style = progress

# CI/CD Integration Configuration
# Optimizes pytest execution for GitHub Actions and automated pipelines
asyncio_mode = auto

# Security testing configuration
# Ensures security-focused tests are properly categorized and executed
security_markers = security

# Flask application factory testing support
# Configures pytest-flask integration for application context management
flask_app = src.app:create_app

# Coverage source configuration
# Ensures accurate coverage measurement across Flask application modules
cov_context = test

# Branch coverage configuration for comprehensive code analysis
cov_branch_tolerance = 0

# Coverage exclusion patterns for generated and vendor code
# Maintains 100% coverage focus on application logic
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Test result retention configuration
# Manages test artifacts and reporting file lifecycle
junit_suite_name = flask_migration_tutorial
junit_logging = all
junit_log_passing_tests = true
junit_duration_report = call

# HTML report customization for enhanced visualization
html_theme = default
html_title = Flask Migration Tutorial - Test Results
html_description = Comprehensive test results for Python Flask Migration Tutorial Application

# XML coverage report configuration for CI/CD integration
xml_pretty = true

# JSON coverage report for programmatic analysis
json_pretty = true

# Performance testing configuration
# Integrates pytest-benchmark for Flask application performance validation
benchmark_min_rounds = 3
benchmark_warmup = false
benchmark_disable_gc = false

# Memory usage monitoring configuration
# Enables psutil integration for resource consumption tracking
memory_profiling = true
memory_threshold_mb = 75

# Parallel execution configuration for improved CI/CD performance
# Supports pytest-xdist for concurrent test execution
max_workers = auto
distributed_testing = true

# Test data management and fixture configuration
# Optimizes fixture scope and lifecycle management
fixture_setup_timeout = 30
fixture_teardown_timeout = 30

# Flask test client configuration
# Enhances pytest-flask integration with custom client settings
flask_test_client_timeout = 10
flask_application_factory = true

# Debug configuration for development and troubleshooting
# Provides enhanced debugging capabilities during test development
debug_mode = false
verbose_errors = true
traceback_style = short

# Coverage report enhancement
# Provides detailed coverage analysis and reporting
show_missing = true
skip_covered = false
precision = 2

# Test execution optimization
# Improves test performance and resource utilization
cache_dir = .pytest_cache
collect_timeout = 60
execution_timeout = 300

# Quality gate configuration
# Enforces comprehensive testing standards and coverage requirements
quality_gate_coverage = 100
quality_gate_tests = 100
quality_gate_performance = true

# Integration testing configuration
# Supports comprehensive Flask application integration testing
integration_timeout = 60
integration_retries = 3
integration_delay = 1

# Container testing configuration
# Enables Docker health check and containerized testing validation
container_testing = true
health_check_timeout = 30
container_startup_timeout = 45

# End-to-end testing configuration
# Supports complete Flask application workflow validation
e2e_timeout = 120
e2e_retries = 2
e2e_parallel = false

# Security testing integration
# Incorporates security validation within pytest execution
security_scan_timeout = 30
vulnerability_threshold = 0
security_report_format = json

# Documentation testing configuration
# Validates code documentation and docstring accuracy
doctest_modules = true
doctest_continue_on_failure = false
doctest_ignore_import_errors = true

# Type checking integration
# Supports mypy integration for static type validation
mypy_enabled = false
mypy_strict = false
mypy_config_file = pyproject.toml

# Code quality integration
# Incorporates linting and formatting validation
code_quality_enabled = true
formatting_check = black
linting_check = flake8
import_sorting = isort

# Test result archival configuration
# Manages long-term test result storage and analysis
archive_results = true
archive_retention_days = 30
archive_format = json

# Notification configuration for CI/CD integration
# Enables automated notifications for test failures and coverage issues
notification_enabled = false
notification_webhook = 
notification_channels = 

# Advanced debugging configuration
# Provides comprehensive debugging capabilities for complex test scenarios
advanced_debugging = false
breakpoint_enabled = false
step_debugging = false

# Plugin management and extension configuration
# Manages pytest plugin ecosystem and custom extensions
plugin_discovery = true
plugin_validation = true
custom_plugins = 

# Test environment validation
# Ensures proper test environment setup and configuration
environment_validation = true
dependency_validation = true
version_validation = true

# Final configuration validation
# Ensures pytest.ini configuration integrity and completeness
config_validation = strict
deprecation_warnings = error
future_warnings = error