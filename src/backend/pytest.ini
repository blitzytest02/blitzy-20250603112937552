# pytest.ini - pytest Testing Configuration for Flask Migration Tutorial
# 
# This configuration file replaces jest.config.js functionality for the Python/Flask
# migration, providing comprehensive testing framework setup with 100% coverage
# enforcement, Flask application testing integration, and CI/CD pipeline support.
#
# Key Features:
# - 100% coverage enforcement across all metrics (lines, branches, functions, statements)
# - pytest-flask integration for Flask application testing with test client fixtures
# - pytest-cov configuration for coverage measurement and multi-format reporting
# - Test discovery patterns following Python conventions (test_*.py files)
# - Pytest markers for test categorization and selective execution
# - Parallel test execution support with pytest-xdist
# - Comprehensive logging and error handling configuration
# - Performance testing integration with pytest-benchmark
# - Security testing integration for Python applications

[tool:pytest]

# ============================================================================
# CORE PYTEST CONFIGURATION
# ============================================================================

# Test Discovery Patterns
# Configure pytest to discover test files following Python naming conventions
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# ============================================================================
# COVERAGE CONFIGURATION (pytest-cov integration)
# ============================================================================

# Coverage enforcement with 100% requirement across all metrics per Section 6.6
# This replaces Jest's 100% coverage thresholds with Python-equivalent validation
addopts = 
    --cov=src
    --cov-branch
    --cov-fail-under=100
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-report=json:coverage.json
    --strict-markers
    --strict-config
    -ra
    -q

# Coverage source paths - focus on application code
cov_branch = true
cov_fail_under = 100

# ============================================================================
# TEST EXECUTION CONFIGURATION
# ============================================================================

# Test timeout and execution parameters
timeout = 30
timeout_method = thread

# Parallel execution support with pytest-xdist for improved performance
# Uncomment the following line to enable parallel execution:
# addopts = %(addopts)s -n auto

# ============================================================================
# PYTEST MARKERS CONFIGURATION
# ============================================================================

# Test markers for categorization and selective execution
markers =
    unit: Unit tests for individual Flask components and functions
    integration: Integration tests for complete Flask request/response cycles
    performance: Performance tests using pytest-benchmark for response time validation
    security: Security tests for Flask application vulnerabilities and hardening
    slow: Tests that take longer than 1 second to execute
    flask: Tests requiring Flask application context and test client
    database: Tests requiring database setup (if implemented in future)
    external: Tests requiring external services or network connectivity
    smoke: Quick smoke tests for basic functionality validation
    regression: Regression tests for previously identified bugs

# ============================================================================
# FLASK TESTING INTEGRATION
# ============================================================================

# Flask-specific test configuration
# pytest-flask integration automatically provides app and client fixtures
flask_app = src.app:create_app
flask_app_config = tests.config:TestConfig

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Logging configuration for test execution
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Log file configuration for detailed debugging
log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)s] %(filename)s:%(lineno)d: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# ============================================================================
# WARNING AND ERROR HANDLING
# ============================================================================

# Configure warning filters and error handling
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:pytest.*
    ignore::PendingDeprecationWarning
    ignore::ImportWarning

# ============================================================================
# PERFORMANCE TESTING CONFIGURATION
# ============================================================================

# pytest-benchmark configuration for performance validation
benchmark_min_rounds = 3
benchmark_warmup = false
benchmark_disable_gc = false
benchmark_sort = min

# ============================================================================
# REPORTING AND OUTPUT CONFIGURATION
# ============================================================================

# JUnit XML output for CI/CD integration (replaces Jest's XML reporting)
junit_family = xunit2
junit_suite_name = flask_migration_tutorial_tests

# Console output configuration
console_output_style = progress
tbstyle = short

# ============================================================================
# ADVANCED CONFIGURATION
# ============================================================================

# Memory and resource management
maxfail = 10
capture = sys

# Test session configuration
cache_dir = .pytest_cache
collect_ignore = [
    "setup.py",
    "conftest.py"
]

# File watching patterns (for pytest-watch if used)
ignore = [
    "*.pyc",
    "__pycache__/",
    ".pytest_cache/",
    "htmlcov/",
    "coverage.xml",
    "coverage.json",
    ".coverage",
    "tests.log"
]

# ============================================================================
# DEVELOPMENT AND DEBUGGING
# ============================================================================

# Development-friendly options (can be overridden in CI)
# Uncomment these for more verbose local development:
# addopts = %(addopts)s --tb=short --capture=no -v

# ============================================================================
# CI/CD INTEGRATION NOTES
# ============================================================================

# This configuration supports the following CI/CD workflows:
# 
# 1. GitHub Actions Integration:
#    - pytest execution with coverage reporting
#    - JUnit XML output for test result visualization
#    - Coverage XML for codecov.io integration
#    - HTML coverage reports as artifacts
#
# 2. Coverage Quality Gates:
#    - 100% coverage enforcement blocks deployment
#    - Branch coverage validation ensures complete test paths
#    - Coverage reports in multiple formats for analysis
#
# 3. Performance Validation:
#    - pytest-benchmark integration for response time testing
#    - Memory usage monitoring with Flask applications
#    - Performance regression detection
#
# 4. Security Testing:
#    - Integration points for bandit security scanning
#    - Support for security-focused test markers
#    - Container security validation workflows
#
# Usage Examples:
# 
# Run all tests with coverage:
#   pytest
#
# Run only unit tests:
#   pytest -m unit
#
# Run with verbose output:
#   pytest -v
#
# Run performance tests:
#   pytest -m performance
#
# Run without coverage (faster development):
#   pytest --no-cov
#
# Generate coverage report only:
#   pytest --cov-report=html --cov-report=term
#
# ============================================================================
# MIGRATION NOTES FROM JEST
# ============================================================================

# This pytest.ini configuration replaces the following Jest features:
#
# jest.config.js → pytest.ini equivalents:
# - testEnvironment: 'node' → Flask test client via pytest-flask
# - collectCoverageFrom → --cov=src with coverage patterns
# - coverageThreshold: 100% → --cov-fail-under=100
# - testMatch patterns → python_files, python_functions
# - coverageReporters → --cov-report multiple formats
# - testTimeout → timeout configuration
# - verbose → log_cli and console output settings
# - collectCoverage → --cov and coverage configuration
# - coverageDirectory → htmlcov output directory
# - setupFiles/setupFilesAfterEnv → conftest.py fixtures
# - testResultsProcessor → junit_family configuration
# - watchPathIgnorePatterns → ignore patterns
# - maxWorkers → pytest-xdist -n auto (optional)
# - cache → cache_dir configuration
# - bail → maxfail setting
#
# Key improvements over Jest configuration:
# - Native Flask application testing support
# - More granular coverage configuration
# - Better performance testing integration
# - Enhanced logging and debugging capabilities
# - Improved CI/CD integration with multiple report formats
# - Python-specific security testing markers
# - More flexible test discovery and execution patterns