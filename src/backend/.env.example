# =============================================================================
# NODE.JS TUTORIAL APPLICATION - ENVIRONMENT CONFIGURATION TEMPLATE
# =============================================================================
# 
# This file provides a template for environment variable configuration for the
# Node.js tutorial application featuring a single /hello endpoint.
# 
# SETUP INSTRUCTIONS:
# 1. Copy this file to .env in the same directory
# 2. Modify values according to your local development needs
# 3. Ensure .env file is listed in .gitignore to prevent version control inclusion
# 4. Start application with 'npm start' to load environment variables automatically
#
# SECURITY NOTE: This template contains only example values, no actual secrets
# or credentials. The .env file should never be committed to version control.
#
# =============================================================================

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Server Port Configuration
# Description: HTTP server port number for Express.js application binding
# Default: 3000 (development-friendly port)
# Validation: Integer between 1024-65535 (non-privileged ports)
# Usage: process.env.PORT || 3000 in server.js
# 
# DEPLOYMENT NOTES:
# - Heroku: PORT automatically provided by Heroku platform
# - Render: PORT automatically provided by Render platform  
# - Railway: PORT automatically provided by Railway platform
# - Docker: Environment variable passed through container runtime
# - VPS: Manual configuration required on virtual private servers
#
# SECURITY: Port validation prevents binding to privileged ports without permission
PORT=3000

# Server Host Configuration
# Description: Server host address for HTTP server binding
# Default: localhost (local development only)
# Validation: Valid hostname, IP address, or 0.0.0.0 for all interfaces
# Usage: Optional host binding configuration in server.listen()
#
# DEPLOYMENT NOTES:
# - Local Development: Use 'localhost' for security
# - Container Deployment: Use '0.0.0.0' for accessibility across container networks
# - Production: Consider specific interface binding for security
#
# SECURITY: Host binding controls network interface access for security
HOST=localhost

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Node.js Environment Mode
# Description: Node.js environment mode affecting Express.js behavior and optimizations
# Default: development (full error messages, no caching)
# Validation: 'development', 'production', 'test'
# Usage: Express.js environment-specific optimizations and error handling
#
# BEHAVIOR BY ENVIRONMENT:
# - development: Detailed error messages, no view caching, verbose logging
# - production: Generic error messages, view caching enabled, optimized performance
# - test: Testing-specific configurations, reduced logging
#
# DEPLOYMENT NOTES:
# - Set to 'production' for all deployment environments
# - Affects Express.js trust proxy and error handling behavior
# - Enables/disables Express.js optimizations and security features
#
# SECURITY: Prevents information disclosure in production environments
NODE_ENV=development

# Application Logging Level
# Description: Application logging level controlling console output verbosity
# Default: info (balanced information for development)
# Validation: 'error', 'warn', 'info', 'debug' (hierarchical verbosity)
# Usage: Educational logging transparency and debugging assistance
#
# LOG LEVEL HIERARCHY (lowest to highest verbosity):
# - error: Only critical errors that require immediate attention
# - warn: Warning conditions that should be addressed but don't stop execution
# - info: General informational messages about application operation
# - debug: Detailed debugging information for development troubleshooting
#
# DEPLOYMENT NOTES:
# - Use 'error' or 'warn' for production environments to reduce log noise
# - 'debug' level may expose sensitive information and impact performance
# - Higher verbosity levels may affect application performance in production
#
# SECURITY: Debug level may expose sensitive information in application logs
LOG_LEVEL=info

# =============================================================================
# EDUCATIONAL CONFIGURATION EXAMPLES
# =============================================================================
#
# The following examples demonstrate additional environment variable patterns
# commonly used in Node.js applications. These are commented out as they are
# not required for the basic tutorial application.

# Database Configuration Example (not used in tutorial)
# DATABASE_URL=postgresql://user:password@localhost:5432/tutorial_app
# DATABASE_MAX_CONNECTIONS=10
# DATABASE_SSL_MODE=prefer

# Authentication Configuration Example (not used in tutorial)  
# JWT_SECRET=your-super-secret-jwt-signing-key-here
# JWT_EXPIRATION=24h
# SESSION_SECRET=your-session-secret-key-here

# External API Configuration Example (not used in tutorial)
# API_BASE_URL=https://api.example.com
# API_KEY=your-api-key-here
# API_TIMEOUT=5000

# Redis Configuration Example (not used in tutorial)
# REDIS_URL=redis://localhost:6379
# REDIS_PASSWORD=your-redis-password
# REDIS_MAX_RETRIES=3

# =============================================================================
# PLATFORM-SPECIFIC DEPLOYMENT EXAMPLES
# =============================================================================

# Heroku Platform Example:
# PORT=5000 (automatically set by Heroku)
# NODE_ENV=production
# LOG_LEVEL=warn

# Render Platform Example:
# PORT=10000 (automatically set by Render)
# NODE_ENV=production  
# LOG_LEVEL=error

# Railway Platform Example:
# PORT=3333 (automatically set by Railway)
# NODE_ENV=production
# LOG_LEVEL=info

# Docker Container Example:
# PORT=3000
# HOST=0.0.0.0
# NODE_ENV=production
# LOG_LEVEL=warn

# =============================================================================
# VALIDATION GUIDELINES
# =============================================================================
#
# PORT Validation:
# - Must be integer value between 1024-65535
# - Port must be available and not in use by other applications
# - Ports below 1024 require root privileges on Unix systems
#
# NODE_ENV Validation:
# - Must be one of: 'development', 'production', 'test'
# - Case-sensitive (lowercase recommended for consistency)
# - Affects Express.js behavior and optimizations
#
# HOST Validation:
# - Must be valid hostname, IP address, or '0.0.0.0'
# - 'localhost' restricts access to local machine only
# - '0.0.0.0' allows access from any network interface
#
# LOG_LEVEL Validation:
# - Must be one of: 'error', 'warn', 'info', 'debug'
# - Case-sensitive (lowercase required)
# - Higher levels include all lower level messages
#
# =============================================================================
# PERFORMANCE CONSIDERATIONS
# =============================================================================
#
# Environment Loading Performance:
# - Startup Time: < 0.1 seconds for environment variable processing
# - Memory Usage: < 1KB memory overhead for environment variable storage
# - CPU Impact: Negligible CPU usage for environment variable access
#
# Configuration Optimization:
# - NODE_ENV=production enables Express.js optimizations and caching
# - Lower LOG_LEVEL reduces console I/O overhead in production
# - Efficient port binding through environment configuration
#
# =============================================================================
# TROUBLESHOOTING
# =============================================================================
#
# Common Issues:
# 1. Port already in use: Change PORT value or stop conflicting process
# 2. Permission denied: Use port number > 1024 or run with appropriate privileges
# 3. Cannot bind to host: Verify HOST value is valid hostname or IP address
# 4. Environment not loaded: Ensure .env file is in correct directory
#
# Debugging Steps:
# 1. Verify .env file exists and is readable
# 2. Check that application is loading environment variables properly
# 3. Validate environment variable values meet requirements
# 4. Test with default values to isolate configuration issues
#
# =============================================================================
# VERSION COMPATIBILITY
# =============================================================================
#
# Node.js Compatibility: v22.16.0 LTS (Active LTS until October 2025)
# Express.js Compatibility: v5.1.0 (latest stable release)
# Platform Compatibility: Windows, macOS, Linux (cross-platform)
#
# =============================================================================