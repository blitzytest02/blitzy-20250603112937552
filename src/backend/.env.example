# =============================================================================
# PYTHON FLASK TUTORIAL APPLICATION - ENVIRONMENT CONFIGURATION TEMPLATE
# =============================================================================
# 
# This file provides a template for environment variable configuration for the
# Python Flask tutorial application featuring a single /hello endpoint.
# 
# SETUP INSTRUCTIONS:
# 1. Copy this file to .env in the same directory
# 2. Modify values according to your local development needs
# 3. Ensure .env file is listed in .gitignore to prevent version control inclusion
# 4. Start application with 'python -m flask run' or 'gunicorn wsgi:application'
#
# SECURITY NOTE: This template contains only example values, no actual secrets
# or credentials. The .env file should never be committed to version control.
#
# =============================================================================

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Server Port Configuration
# Description: HTTP server port number for Flask application binding
# Default: 3000 (development-friendly port)
# Validation: Integer between 1024-65535 (non-privileged ports)
# Usage: os.getenv('PORT', 3000) in wsgi.py and Flask development server
# 
# DEPLOYMENT NOTES:
# - Heroku: PORT automatically provided by Heroku platform
# - Render: PORT automatically provided by Render platform  
# - Railway: PORT automatically provided by Railway platform
# - Azure Web Apps: PORT automatically provided by Azure platform
# - Docker: Environment variable passed through container runtime
# - VPS: Manual configuration required on virtual private servers
#
# SECURITY: Port validation prevents binding to privileged ports without permission
PORT=3000

# Server Host Configuration
# Description: Server host address for HTTP server binding
# Default: localhost (local development only)
# Validation: Valid hostname, IP address, or 0.0.0.0 for all interfaces
# Usage: Flask development server and Gunicorn host binding configuration
#
# DEPLOYMENT NOTES:
# - Local Development: Use 'localhost' for security
# - Container Deployment: Use '0.0.0.0' for accessibility across container networks
# - Production: Consider specific interface binding for security
#
# SECURITY: Host binding controls network interface access for security
HOST=localhost

# =============================================================================
# FLASK APPLICATION CONFIGURATION
# =============================================================================

# Flask Environment Mode
# Description: Flask environment mode affecting application behavior and optimizations
# Default: production (optimized performance, security-focused)
# Validation: 'development', 'production', 'testing'
# Usage: Flask environment-specific optimizations and error handling
#
# BEHAVIOR BY ENVIRONMENT:
# - development: Detailed error messages, debug mode available, verbose logging
# - production: Generic error messages, optimized performance, security hardening
# - testing: Testing-specific configurations, reduced logging, isolation features
#
# DEPLOYMENT NOTES:
# - Set to 'production' for all deployment environments
# - Affects Flask security settings and error handling behavior
# - Enables/disables Flask optimizations and debugging features
#
# SECURITY: Prevents information disclosure in production environments
FLASK_ENV=development

# Flask Debug Mode Configuration
# Description: Flask debug mode enabling enhanced debugging features and hot reload
# Default: False (disabled for security in production)
# Validation: 'true', '1', 'yes', 'on' for enabled; anything else for disabled
# Usage: Flask debug mode activation and development server auto-reload
#
# DEBUG MODE FEATURES:
# - Enhanced error pages with interactive debugger
# - Automatic code reloading on file changes
# - Template auto-reloading for dynamic updates
# - Detailed exception information and stack traces
#
# DEPLOYMENT NOTES:
# - NEVER enable in production environments (major security risk)
# - Only use in local development with trusted code
# - Debug mode exposes internal application structure
# - Can significantly impact performance
#
# SECURITY: Debug mode can expose sensitive information and security vulnerabilities
FLASK_DEBUG=true

# Application Logging Level
# Description: Application logging level controlling console output verbosity
# Default: info (balanced information for development)
# Validation: 'error', 'warn', 'info', 'debug' (hierarchical verbosity)
# Usage: Python logging configuration and debugging assistance
#
# LOG LEVEL HIERARCHY (lowest to highest verbosity):
# - error: Only critical errors that require immediate attention
# - warn: Warning conditions that should be addressed but don't stop execution
# - info: General informational messages about application operation
# - debug: Detailed debugging information for development troubleshooting
#
# DEPLOYMENT NOTES:
# - Use 'error' or 'warn' for production environments to reduce log noise
# - 'debug' level may expose sensitive information and impact performance
# - Higher verbosity levels may affect application performance in production
#
# SECURITY: Debug level may expose sensitive information in application logs
LOG_LEVEL=info

# =============================================================================
# WSGI SERVER CONFIGURATION (PRODUCTION)
# =============================================================================

# Gunicorn Worker Processes
# Description: Number of worker processes for Gunicorn WSGI server deployment
# Default: 1 (single worker for basic applications)
# Validation: Integer between 1-8 (recommended: 2 * CPU cores + 1)
# Usage: Gunicorn process management and concurrent request handling
#
# WORKER CALCULATION GUIDELINES:
# - CPU-bound applications: workers = CPU cores
# - I/O-bound applications: workers = 2 * CPU cores + 1
# - Memory constraints: Reduce workers to fit available RAM
# - Single-core systems: Use 1-2 workers maximum
#
# DEPLOYMENT NOTES:
# - Container deployments: Consider container CPU limits
# - Azure Web Apps: Adjust based on pricing tier CPU allocation
# - Development: Use 1 worker for simplicity
# - Production: Scale based on traffic and resource availability
#
# PERFORMANCE: More workers enable higher concurrent request processing
WORKERS=1

# Flask Application Secret Key
# Description: Secret key for Flask session management and security features
# Default: dev-secret-key-change-in-production (development only)
# Validation: Random string with high entropy (minimum 32 characters)
# Usage: Flask session encryption, CSRF protection, and security token generation
#
# SECRET KEY REQUIREMENTS:
# - Use cryptographically secure random generation
# - Minimum 32 characters length for security
# - Include mixed case letters, numbers, and symbols
# - Never hardcode in production applications
#
# DEPLOYMENT NOTES:
# - Generate unique keys for each environment
# - Store in secure environment variable management
# - Rotate keys periodically for security
# - Different keys for staging and production
#
# SECURITY: Weak secret keys compromise application security and user sessions
SECRET_KEY=dev-secret-key-change-in-production-environments

# =============================================================================
# EDUCATIONAL CONFIGURATION EXAMPLES
# =============================================================================
#
# The following examples demonstrate additional environment variable patterns
# commonly used in Python Flask applications. These are commented out as they are
# not required for the basic tutorial application.

# Database Configuration Example (not used in tutorial)
# DATABASE_URL=postgresql://user:password@localhost:5432/tutorial_app
# DATABASE_MAX_CONNECTIONS=10
# DATABASE_SSL_MODE=prefer
# SQLALCHEMY_DATABASE_URI=postgresql://user:password@localhost:5432/tutorial_app

# Authentication Configuration Example (not used in tutorial)  
# JWT_SECRET_KEY=your-super-secret-jwt-signing-key-here
# JWT_ACCESS_TOKEN_EXPIRES=3600
# SESSION_PERMANENT=false
# PERMANENT_SESSION_LIFETIME=1800

# External API Configuration Example (not used in tutorial)
# API_BASE_URL=https://api.example.com
# API_KEY=your-api-key-here
# API_TIMEOUT=5
# REQUESTS_TIMEOUT=30

# Redis Configuration Example (not used in tutorial)
# REDIS_URL=redis://localhost:6379
# REDIS_PASSWORD=your-redis-password
# REDIS_DB=0
# CELERY_BROKER_URL=redis://localhost:6379/0

# =============================================================================
# PLATFORM-SPECIFIC DEPLOYMENT EXAMPLES
# =============================================================================

# Heroku Platform Example:
# PORT=5000 (automatically set by Heroku)
# FLASK_ENV=production
# LOG_LEVEL=warn
# WORKERS=2

# Render Platform Example:
# PORT=10000 (automatically set by Render)
# FLASK_ENV=production  
# LOG_LEVEL=error
# WORKERS=2

# Railway Platform Example:
# PORT=3333 (automatically set by Railway)
# FLASK_ENV=production
# LOG_LEVEL=info
# WORKERS=1

# Azure Web Apps Example:
# PORT=8000 (automatically set by Azure)
# FLASK_ENV=production
# LOG_LEVEL=warn
# WORKERS=2
# HOST=0.0.0.0

# Docker Container Example:
# PORT=3000
# HOST=0.0.0.0
# FLASK_ENV=production
# FLASK_DEBUG=false
# LOG_LEVEL=warn
# WORKERS=2

# =============================================================================
# VALIDATION GUIDELINES
# =============================================================================
#
# PORT Validation:
# - Must be integer value between 1024-65535
# - Port must be available and not in use by other applications
# - Ports below 1024 require root privileges on Unix systems
#
# FLASK_ENV Validation:
# - Must be one of: 'development', 'production', 'testing'
# - Case-sensitive (lowercase recommended for consistency)
# - Affects Flask behavior, security settings, and optimizations
#
# FLASK_DEBUG Validation:
# - 'true', '1', 'yes', 'on' enable debug mode
# - Any other value disables debug mode
# - Should NEVER be enabled in production environments
#
# HOST Validation:
# - Must be valid hostname, IP address, or '0.0.0.0'
# - 'localhost' restricts access to local machine only
# - '0.0.0.0' allows access from any network interface
#
# LOG_LEVEL Validation:
# - Must be one of: 'error', 'warn', 'info', 'debug'
# - Case-sensitive (lowercase required)
# - Higher levels include all lower level messages
#
# WORKERS Validation:
# - Must be positive integer between 1-8
# - Consider CPU cores and memory constraints
# - More workers require more memory allocation
#
# SECRET_KEY Validation:
# - Minimum 32 characters for security
# - Use cryptographically secure random generation
# - Never use default development key in production
#
# =============================================================================
# PERFORMANCE CONSIDERATIONS
# =============================================================================
#
# Environment Loading Performance:
# - Startup Time: < 0.2 seconds for environment variable processing
# - Memory Usage: < 2KB memory overhead for environment variable storage
# - CPU Impact: Negligible CPU usage for environment variable access
#
# Configuration Optimization:
# - FLASK_ENV=production enables Flask optimizations and security features
# - Lower LOG_LEVEL reduces console I/O overhead in production
# - Efficient port binding through environment configuration
# - WORKERS scaling improves concurrent request handling
#
# =============================================================================
# TROUBLESHOOTING
# =============================================================================
#
# Common Issues:
# 1. Port already in use: Change PORT value or stop conflicting process
# 2. Permission denied: Use port number > 1024 or run with appropriate privileges
# 3. Cannot bind to host: Verify HOST value is valid hostname or IP address
# 4. Environment not loaded: Ensure .env file is in correct directory
# 5. Flask debug mode security: Never enable FLASK_DEBUG in production
# 6. Gunicorn workers failing: Reduce WORKERS count if memory constrained
#
# Debugging Steps:
# 1. Verify .env file exists and is readable
# 2. Check that Flask application is loading environment variables properly
# 3. Validate environment variable values meet requirements
# 4. Test with default values to isolate configuration issues
# 5. Use 'python -m flask --help' to verify Flask CLI configuration
# 6. Check Gunicorn logs for worker process issues
#
# Flask-Specific Debugging:
# 1. Use 'flask routes' command to verify route registration
# 2. Set FLASK_DEBUG=true for detailed error information
# 3. Check Flask application factory function for configuration issues
# 4. Verify python-dotenv is loading .env file correctly
# 5. Use Flask's built-in debugger for development troubleshooting
#
# =============================================================================
# VERSION COMPATIBILITY
# =============================================================================
#
# Python Compatibility: v3.12+ (Latest stable with modern features)
# Flask Compatibility: v3.1.1 (Latest stable release with security updates)
# Gunicorn Compatibility: v21.0.0+ (WSGI server for production deployment)
# Platform Compatibility: Windows, macOS, Linux (cross-platform Python support)
#
# Dependency Versions:
# - python-dotenv>=1.0.1 (Environment variable loading)
# - Flask-CORS>=4.0.0 (Cross-origin resource sharing)
# - pytest>=8.4.0 (Testing framework)
# - pytest-flask>=1.3.0 (Flask testing integration)
# - coverage>=7.6.0 (Code coverage analysis)
#
# =============================================================================