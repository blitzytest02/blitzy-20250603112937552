name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'requirements-dev.txt'
      - 'pytest.ini'
      - 'pyproject.toml'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  schedule:
    # Weekly scheduled run every Monday at 2 AM UTC for dependency and security validation
    - cron: '0 2 * * 1'
  workflow_dispatch:
    # Manual workflow trigger for on-demand CI execution and testing

# Prevent concurrent workflow runs for the same branch to optimize resource usage
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Environment variables for consistent configuration across all jobs
env:
  FLASK_ENV: testing
  CI: true
  COVERAGE_THRESHOLD: 100
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_NO_CACHE_DIR: false
  PIP_UPGRADE_STRATEGY: eager
  FORCE_COLOR: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    # Test against Python 3.12, 3.11, and 3.10 for compatibility validation per Section 8.5.1
    strategy:
      matrix:
        python-version: ['3.12', '3.11', '3.10']
        
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Checkout source code with full git history for comprehensive analysis
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
          
      - name: Install Dependencies
        working-directory: src/backend
        run: |
          # Upgrade pip and install exact dependencies for reproducible builds
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run Python Linting
        working-directory: src/backend
        run: |
          # Execute flake8 for PEP 8 compliance and code quality validation
          flake8 . --config=.flake8 --statistics --count
          
      - name: Run Unit Tests with Coverage
        working-directory: src/backend
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          # Execute pytest test suite with coverage collection and CI optimizations
          pytest --cov=src --cov-report=html:htmlcov --cov-report=xml:coverage.xml --cov-report=term-missing --cov-fail-under=100 --junit-xml=junit.xml --html=pytest_report.html --self-contained-html -v
          
      - name: Upload Coverage Reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: src/backend/coverage.xml
          flags: unittests
          name: codecov-python-${{ matrix.python-version }}
          fail_ci_if_error: false
          env_vars: PYTHON_VERSION
          
      - name: Upload Test Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports-python-${{ matrix.python-version }}
          path: |
            src/backend/htmlcov/
            src/backend/coverage.xml
            src/backend/pytest_report.html
            src/backend/junit.xml
          retention-days: 30
          
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-python-${{ matrix.python-version }}
          path: |
            src/backend/junit.xml
            src/backend/pytest_report.html
          retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Checkout source code for security vulnerability scanning
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            
      - name: Install Dependencies
        working-directory: src/backend
        run: |
          # Install dependencies for security vulnerability analysis
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit[toml] safety pip-audit
          
      - name: Run Bandit Security Analysis
        working-directory: src/backend
        run: |
          # Execute bandit static security analysis for Python code vulnerabilities
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f sarif -o bandit-report.sarif || true
          bandit -r src/ --severity-level medium
          
      - name: Run Safety Dependency Vulnerability Scanning
        working-directory: src/backend
        run: |
          # Execute safety scan for known PyPI package vulnerabilities
          safety check --json --output safety-report.json || true
          safety check --short-report
          
      - name: Run pip-audit Dependency Scanning
        working-directory: src/backend
        run: |
          # Execute pip-audit for comprehensive dependency vulnerability scanning
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=sarif --output=pip-audit-report.sarif || true
          pip-audit
          
      - name: Run OSSF Scorecard for Supply Chain Security
        uses: ossf/scorecard-action@v2
        with:
          results_file: scorecard-results.sarif
          results_format: sarif
          publish_results: true
          
      - name: Upload Security SARIF Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            src/backend/bandit-report.sarif
            src/backend/pip-audit-report.sarif
            scorecard-results.sarif
            
      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            src/backend/bandit-report.json
            src/backend/bandit-report.sarif
            src/backend/safety-report.json
            src/backend/pip-audit-report.json
            src/backend/pip-audit-report.sarif
            scorecard-results.sarif
          retention-days: 90

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, security]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Download Coverage Reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports-python-3.12
          path: coverage
          
      - name: Download Security Reports
        uses: actions/download-artifact@v3
        with:
          name: security-reports
          path: security
          
      - name: Install Dependencies
        working-directory: src/backend
        run: |
          python -m pip install --upgrade pip
          pip install coverage[toml] lxml
        
      - name: Validate Coverage Threshold
        working-directory: src/backend
        env:
          COVERAGE_THRESHOLD: 100
        run: |
          # Create Python coverage validation script
          cat > scripts/validate_coverage.py << 'EOF'
          import json
          import os
          import sys
          from xml.etree import ElementTree as ET
          
          def validate_coverage():
              threshold = int(os.environ.get('COVERAGE_THRESHOLD', '100'))
              coverage_xml_path = '../coverage/coverage.xml'
              
              if not os.path.exists(coverage_xml_path):
                  print('❌ Coverage XML report not found')
                  sys.exit(1)
              
              # Parse coverage XML report
              tree = ET.parse(coverage_xml_path)
              root = tree.getroot()
              
              # Extract coverage metrics
              coverage = root.attrib
              line_rate = float(coverage.get('line-rate', 0)) * 100
              branch_rate = float(coverage.get('branch-rate', 0)) * 100
              
              print(f"📊 Coverage Summary:")
              print(f"   Lines: {line_rate:.2f}%")
              print(f"   Branches: {branch_rate:.2f}%")
              
              # Validate against threshold
              if line_rate < threshold or branch_rate < threshold:
                  print(f"❌ Coverage below threshold of {threshold}%")
                  print(f"   Line coverage: {line_rate:.2f}% (required: {threshold}%)")
                  print(f"   Branch coverage: {branch_rate:.2f}% (required: {threshold}%)")
                  sys.exit(1)
              
              print(f"✅ All coverage metrics meet the {threshold}% threshold")
              return True
          
          if __name__ == '__main__':
              validate_coverage()
          EOF
          
          # Create scripts directory if it doesn't exist
          mkdir -p scripts
          
          # Run coverage validation
          python scripts/validate_coverage.py
          
      - name: Validate Security Reports
        working-directory: src/backend
        run: |
          # Validate bandit security scan results
          if [ -f "../security/bandit-report.json" ]; then
            echo "🔍 Analyzing bandit security report..."
            python -c "
          import json
          with open('../security/bandit-report.json') as f:
              report = json.load(f)
          high_issues = [issue for issue in report.get('results', []) if issue.get('issue_severity') == 'HIGH']
          if high_issues:
              print(f'❌ Found {len(high_issues)} high-severity security issues')
              exit(1)
          else:
              print('✅ No high-severity security issues found')
          "
          else
            echo "⚠️ Bandit report not found, skipping security validation"
          fi
          
          # Validate safety dependency scan results
          if [ -f "../security/safety-report.json" ]; then
            echo "🔍 Analyzing safety dependency report..."
            python -c "
          import json
          with open('../security/safety-report.json') as f:
              report = json.load(f)
          vulnerabilities = report.get('vulnerabilities', [])
          if vulnerabilities:
              print(f'❌ Found {len(vulnerabilities)} dependency vulnerabilities')
              exit(1)
          else:
              print('✅ No dependency vulnerabilities found')
          "
          else
            echo "⚠️ Safety report not found, skipping dependency validation"
          fi
          
      - name: Quality Gate Status
        run: |
          echo "✅ Quality gate passed - all checks successful"
          echo "🧪 Test Suite: Passed (Python 3.12, 3.11, 3.10)"
          echo "🔒 Security Scan: Passed (bandit + safety + pip-audit)" 
          echo "📊 Coverage Threshold: Met (100%)"
          echo "🐍 Python Code Quality: Validated (flake8)"
          echo "🏆 All quality requirements satisfied"