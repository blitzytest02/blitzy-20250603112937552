# pytest Configuration File for Flask Migration Tutorial Application
# This file replaces jest.config.js functionality with Python testing framework configuration
# Enforces 100% code coverage requirements across all metrics per Section 6.6.4.1
# Configures pytest-flask integration and comprehensive test execution parameters

[tool:pytest]
# Test Discovery Configuration (Section 6.6.2.1)
# Configure pytest to discover test files matching Python conventions
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Core pytest Options with Coverage Enforcement (Section 6.6.4.1)
# Enforce 100% coverage requirement across all metrics as mandated
# Configure multiple coverage report formats for CI/CD integration
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-branch
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=json:coverage.json
    --cov-fail-under=100
    --junit-xml=junit.xml
    --html=pytest_report.html
    --self-contained-html

# Test Execution Configuration
# Configure timeouts and execution parameters for comprehensive validation
timeout = 300
timeout_method = thread

# Parallel Execution Support (Section 6.6.3.1.3)
# Enable parallel test execution for performance optimization
# Uncomment the following line when pytest-xdist is available:
# addopts = --numprocesses=auto

# Test Markers for Categorization (Section 6.6)
# Define pytest markers for organized test execution and CI/CD integration
markers =
    unit: Unit tests for individual Flask components and functions
    integration: Integration tests for complete Flask request/response cycles
    performance: Performance and benchmark tests using pytest-benchmark
    slow: Tests that take longer than 1 second to execute
    flask: Flask application-specific tests requiring app context
    api: HTTP endpoint tests using Flask test client
    security: Security validation tests including error handling
    health: Health check and monitoring endpoint tests
    memory: Memory usage and leak detection tests using psutil
    concurrent: Concurrent load testing and parallel request validation

# pytest-flask Integration (Section 6.6.2.1)
# Configure Flask application testing with pytest-flask fixtures
flask_caching_config = {
    "CACHE_TYPE": "SimpleCache",
    "CACHE_DEFAULT_TIMEOUT": 300
}

# Coverage Configuration Details
# Configure coverage.py integration for comprehensive code analysis
# Coverage source directories and exclusion patterns
[coverage:run]
source = src
branch = true
omit = 
    tests/*
    */conftest.py
    */test_*.py
    venv/*
    .venv/*

[coverage:report]
# Coverage reporting configuration for terminal output
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = true
skip_covered = false
precision = 2

[coverage:html]
# HTML coverage report configuration
directory = htmlcov
title = Flask Migration Tutorial - Coverage Report

[coverage:xml]
# XML coverage report for CI/CD integration (Section 6.6.3.1.4)
output = coverage.xml

[coverage:json]
# JSON coverage report for programmatic analysis
output = coverage.json
pretty_print = true

# Logging Configuration for Test Execution
# Configure pytest logging for comprehensive test output and debugging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Pytest Performance Configuration
# Configure pytest execution for optimal performance and reliability
cache_dir = .pytest_cache
consider_namespace_packages = true

# Warning Configuration
# Configure pytest warning handling for clean test output
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:distutils
    ignore::PendingDeprecationWarning
    ignore:.*flask_cors.*:DeprecationWarning

# Test Environment Variables
# Configure environment variables for consistent test execution
env =
    FLASK_ENV = testing
    TESTING = 1
    WTF_CSRF_ENABLED = False
    SECRET_KEY = testing-secret-key
    LOG_LEVEL = ERROR

# pytest-benchmark Configuration (Section 6.6.7.2)
# Configure performance benchmarking integration for Flask endpoints
benchmark_min_time = 0.001
benchmark_max_time = 1.0
benchmark_min_rounds = 3
benchmark_timer = time.perf_counter
benchmark_disable_gc = false
benchmark_warmup = false
benchmark_warmup_iterations = 1
benchmark_sort = mean

# Memory Usage Monitoring Configuration
# Configure memory monitoring for Flask application testing
# Uses psutil for memory usage tracking and leak detection
memory_monitor = true
memory_limit_mb = 75
memory_growth_limit_mb = 5

# Security Testing Configuration
# Configure security testing parameters for Flask application validation
security_headers_validation = true
error_response_sanitization = true
csrf_protection_testing = false

# Documentation and Reporting Enhancement
# Additional configuration for comprehensive test documentation
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS
doctest_encoding = utf-8

# Pytest Plugin Configuration
# Configure required and optional pytest plugins for enhanced functionality
required_plugins =
    pytest-cov>=5.0.0
    pytest-html>=4.0.0
    pytest-timeout>=2.0.0

# Optional plugins (uncomment when available):
# pytest-xdist>=3.0.0 (for parallel execution)
# pytest-benchmark>=4.0.0 (for performance testing) 
# pytest-flask>=1.3.0 (for Flask application testing)
# pytest-mock>=3.0.0 (for enhanced mocking capabilities)

# Test Data and Fixture Configuration
# Configure test data management and fixture behavior
usefixtures = 
    configure_test_environment

# Fixture scope optimization for performance
# Configure fixture scopes for optimal resource utilization
function_scope_fixtures = memory_monitor, dynamic_port
module_scope_fixtures = app, client
session_scope_fixtures = test_config

# CI/CD Integration Configuration (Section 6.6.3.1)
# Configuration optimized for GitHub Actions and automated testing
ci_mode = true
github_actions_integration = true
artifact_retention_days = 30

# Quality Gate Configuration (Section 6.6.4)
# Configure quality gates for CI/CD pipeline integration
fail_fast = false
maxfail = 0
strict_coverage = true
performance_regression_threshold = 10