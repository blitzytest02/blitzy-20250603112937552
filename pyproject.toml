# =============================================================================
# pyproject.toml - Modern Python Project Configuration
# =============================================================================
# Centralized configuration file for the Flask Migration Tutorial Application
# following PEP 518 standards for modern Python project management.
#
# This file consolidates:
# - Build system requirements for package distribution
# - pytest configuration as alternative to pytest.ini
# - black code formatter settings for consistent code style
# - mypy type checker configuration for optional static analysis
# - Tool-specific settings for comprehensive development workflow
# - CI/CD integration parameters for automated quality validation
#
# Replaces multiple configuration files with unified TOML format while
# maintaining compatibility with existing Flask development practices.
# =============================================================================

# -----------------------------------------------------------------------------
# PEP 518 Build System Configuration
# -----------------------------------------------------------------------------
# Define modern Python packaging build system requirements for potential
# package distribution and optimized dependency management

[build-system]
requires = [
    "setuptools>=68.0",
    "wheel>=0.42.0",
    "setuptools-scm>=8.0"
]
build-backend = "setuptools.build_meta"

# -----------------------------------------------------------------------------
# Project Metadata and Configuration
# -----------------------------------------------------------------------------
# Define comprehensive project information following PEP 621 standards
# for modern Python package metadata specification

[project]
name = "flask-migration-tutorial"
version = "1.0.0"
description = "Python Flask Migration Tutorial Application - Enterprise-grade Hello World demonstrating Node.js to Python migration patterns with comprehensive testing and CI/CD integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Flask Migration Tutorial Team", email = "tutorial@example.com"}
]
maintainers = [
    {name = "Flask Migration Tutorial Team", email = "tutorial@example.com"}
]
keywords = [
    "flask",
    "python",
    "tutorial", 
    "migration",
    "nodejs",
    "web-framework",
    "hello-world",
    "pytest",
    "enterprise"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment", 
    "Framework :: Flask",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Education",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed"
]
requires-python = ">=3.12"

# Runtime dependencies for Flask application deployment
dependencies = [
    "Flask>=3.1.1",
    "python-dotenv>=1.0.1", 
    "Flask-CORS>=4.0.0",
    "gunicorn>=21.2.0",
    "wheel>=0.42.0"
]

# Optional dependencies for enhanced development and production features
[project.optional-dependencies]
dev = [
    # Testing framework ecosystem
    "pytest>=8.4.0",
    "pytest-flask>=1.3.0",
    "coverage>=7.6.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.5.0",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.12.0",
    
    # Performance testing and monitoring
    "pytest-benchmark>=4.0.0", 
    "psutil>=5.9.6",
    
    # Code quality and formatting
    "black>=24.0.0",
    "flake8>=7.0.0",
    "flake8-security>=1.7.1",
    "mypy>=1.8.0",
    "isort>=5.13.2",
    
    # Security testing tools
    "bandit>=1.7.5",
    "safety>=3.0.1",
    
    # Development utilities
    "watchdog>=3.0.0",
    "python-multipart>=0.0.6"
]

security = [
    "bandit>=1.7.5",
    "safety>=3.0.1",
    "pip-audit>=2.6.1"
]

docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=1.3.0"
]

performance = [
    "pytest-benchmark>=4.0.0",
    "psutil>=5.9.6",
    "memory-profiler>=0.61.0"
]

# Project URLs for documentation and repository access
[project.urls]
Homepage = "https://github.com/flask-migration-tutorial/flask-hello-world"
Documentation = "https://flask-migration-tutorial.readthedocs.io/"
Repository = "https://github.com/flask-migration-tutorial/flask-hello-world.git"
"Bug Tracker" = "https://github.com/flask-migration-tutorial/flask-hello-world/issues"
"CI/CD Pipeline" = "https://github.com/flask-migration-tutorial/flask-hello-world/actions"
"Security Policy" = "https://github.com/flask-migration-tutorial/flask-hello-world/security/policy"

# -----------------------------------------------------------------------------
# pytest Configuration (Alternative to pytest.ini)
# -----------------------------------------------------------------------------
# Comprehensive pytest testing framework configuration following
# Section 6.6 Testing Strategy requirements with 100% coverage enforcement

[tool.pytest.ini_options]
# Test discovery configuration for Flask application testing
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Core pytest execution options with coverage enforcement
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-branch", 
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=json:coverage.json",
    "--cov-fail-under=100",
    "--junit-xml=junit.xml",
    "--html=pytest_report.html",
    "--self-contained-html"
]

# Test execution timeout and performance configuration
timeout = 300
timeout_method = "thread"

# Test markers for organized execution and CI/CD integration
markers = [
    "unit: Unit tests for individual Flask components and functions",
    "integration: Integration tests for complete Flask request/response cycles", 
    "performance: Performance and benchmark tests using pytest-benchmark",
    "slow: Tests that take longer than 1 second to execute",
    "flask: Flask application-specific tests requiring app context",
    "api: HTTP endpoint tests using Flask test client",
    "security: Security validation tests including error handling",
    "health: Health check and monitoring endpoint tests",
    "memory: Memory usage and leak detection tests using psutil", 
    "concurrent: Concurrent load testing and parallel request validation"
]

# Logging configuration for comprehensive test output
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Test environment variables for Flask application testing
env = [
    "FLASK_ENV=testing",
    "TESTING=1", 
    "WTF_CSRF_ENABLED=False",
    "SECRET_KEY=testing-secret-key",
    "LOG_LEVEL=ERROR"
]

# Warning filter configuration for clean test output
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:distutils",
    "ignore::PendingDeprecationWarning",
    "ignore:.*flask_cors.*:DeprecationWarning"
]

# Performance testing configuration with pytest-benchmark
[tool.pytest.ini_options.benchmark]
min_time = 0.001
max_time = 1.0
min_rounds = 3
timer = "time.perf_counter"
disable_gc = false
warmup = false
warmup_iterations = 1
sort = "mean"

# -----------------------------------------------------------------------------
# Coverage.py Configuration
# -----------------------------------------------------------------------------
# Code coverage measurement and reporting configuration for 100% enforcement

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "*/conftest.py", 
    "*/test_*.py",
    "venv/*",
    ".venv/*",
    "build/*",
    "dist/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
skip_covered = false
precision = 2
fail_under = 100

[tool.coverage.html]
directory = "htmlcov"
title = "Flask Migration Tutorial - Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"
pretty_print = true

# -----------------------------------------------------------------------------
# Black Code Formatter Configuration 
# -----------------------------------------------------------------------------
# Uncompromising Python code formatter configuration for consistent style

[tool.black]
line-length = 88
target-version = ["py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
    # Directories to exclude from black formatting
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
  | htmlcov
  | \.pytest_cache
  | infrastructure
)/
'''
preview = false
color = true
fast = false

# -----------------------------------------------------------------------------
# mypy Static Type Checker Configuration (Optional)
# -----------------------------------------------------------------------------
# Optional static type checking for enhanced IDE support and code quality

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true
ignore_missing_imports = true

# Flask and testing framework specific configuration
[[tool.mypy.overrides]]
module = [
    "flask.*",
    "pytest.*", 
    "coverage.*",
    "psutil.*",
    "gunicorn.*"
]
ignore_missing_imports = true

# Test files have relaxed type checking requirements
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

# -----------------------------------------------------------------------------
# isort Import Sorting Configuration
# -----------------------------------------------------------------------------
# Import statement organization compatible with black formatting

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src", "app", "backend"]
known_third_party = ["flask", "pytest", "coverage", "psutil", "gunicorn"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_sort_within_sections = true
show_diff = true
color_output = true

# -----------------------------------------------------------------------------
# Bandit Security Scanner Configuration
# -----------------------------------------------------------------------------
# Python security vulnerability detection and static analysis

[tool.bandit]
exclude_dirs = [
    "tests",
    "venv", 
    ".venv",
    "build",
    "dist",
    ".pytest_cache",
    "htmlcov"
]
skips = [
    "B101",  # assert_used - allow assertions in tests and development
    "B601",  # paramiko_calls - not applicable to Flask application
    "B602",  # subprocess_popen_with_shell_equals_true - handled by subprocess configuration
]

# Test files have relaxed security scanning 
[tool.bandit.assert_used]
exclude = ["**/test_*.py", "tests/**"]

# -----------------------------------------------------------------------------
# Flake8 Configuration Integration
# -----------------------------------------------------------------------------
# Note: flake8 does not natively support pyproject.toml configuration
# This section documents flake8 settings for reference; actual configuration
# remains in .flake8 file for compatibility with CI/CD pipelines

[tool.flake8]
# These settings would apply if flake8 supported pyproject.toml:
max-line-length = 88
max-complexity = 10
extend-ignore = ["E203", "E501", "W503", "W504"]
per-file-ignores = [
    "tests/*.py:E501,F401,S101,S105,S106,B101",
    "test_*.py:E501,F401,S101,S105,S106,B101"
]

# -----------------------------------------------------------------------------
# setuptools Configuration for Package Building
# -----------------------------------------------------------------------------
# Modern setuptools configuration for package distribution capabilities

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json", "*.cfg", "*.ini"]

# Setuptools SCM for version management from git tags
[tool.setuptools_scm]
write_to = "src/_version.py"
version_scheme = "python-simplified-semver"
local_scheme = "no-local-version"

# -----------------------------------------------------------------------------
# Development Tool Configuration
# -----------------------------------------------------------------------------
# Additional development tools and utilities configuration

# pip-tools configuration for dependency management
[tool.pip-tools]
generate-hashes = true
upgrade = false
quiet = 1

# pytest-benchmark configuration for performance testing
[tool.pytest-benchmark]
min_time = 0.001
max_time = 1.0
min_rounds = 3
timer = "time.perf_counter"
disable_gc = false
histogram = true
json_output = "benchmark_results.json"

# Memory monitoring configuration for Flask application testing
[tool.memory-monitor]
limit_mb = 75
growth_limit_mb = 5
enable_tracking = true
psutil_integration = true

# -----------------------------------------------------------------------------
# CI/CD Integration Configuration
# -----------------------------------------------------------------------------
# Configuration optimizations for GitHub Actions and automated pipelines

[tool.ci]
# GitHub Actions integration settings
github_actions = true
artifact_retention_days = 30
parallel_jobs = "auto"

# Quality gate configuration for deployment pipelines
[tool.quality-gates]
coverage_threshold = 100
performance_regression_threshold = 10
memory_limit_mb = 75
response_time_limit_ms = 50
security_scan_required = true

# =============================================================================
# Configuration Summary and Integration Notes
# =============================================================================
# This pyproject.toml provides centralized configuration for:
#
# 1. Modern Python packaging with PEP 518/621 compliance
# 2. pytest testing framework with 100% coverage enforcement  
# 3. black code formatting with 88-character line length
# 4. mypy optional static type checking for enhanced IDE support
# 5. isort import organization compatible with black
# 6. bandit security scanning with Flask-appropriate exclusions
# 7. setuptools package building with SCM version management
# 8. CI/CD integration parameters for automated quality validation
#
# Key Benefits:
# - Single configuration file for multiple development tools
# - PEP 518 standard compliance for modern Python development
# - Full compatibility with existing Flask development workflow  
# - Enhanced IDE integration and developer experience
# - Comprehensive testing and quality assurance configuration
# - Production-ready packaging and distribution support
# - Educational value for modern Python project management
#
# Usage:
# - pip install -e .[dev] # Install with development dependencies
# - pytest                # Run tests with configured settings
# - black .               # Format code with configured options
# - mypy src/             # Type check with configured parameters
# - bandit -r src/        # Security scan with configured exclusions
# - python -m build       # Build package with configured metadata
# =============================================================================