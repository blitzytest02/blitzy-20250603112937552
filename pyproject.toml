[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flask-hello-world-tutorial"
version = "1.0.0"
description = "Python Flask Hello World Tutorial Application demonstrating modern Flask development practices"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Flask Tutorial Team", email = "tutorial@example.com"}
]
maintainers = [
    {name = "Flask Tutorial Team", email = "tutorial@example.com"}
]
keywords = [
    "flask",
    "python",
    "web",
    "tutorial",
    "api",
    "rest",
    "wsgi",
    "gunicorn"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Flask",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Topic :: Education",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.12"
dependencies = [
    "Flask>=3.1.1",
    "python-dotenv>=1.0.1",
    "Flask-CORS>=4.0.0",
    "gunicorn>=21.2.0",
    "wheel>=0.42.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-flask>=1.3.0",
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.0",
    "pytest-html>=4.1.0",
    "coverage>=7.6.0",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "flake8-security>=1.7.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "mypy>=1.8.0",
    "pip-audit>=2.6.0",
    "psutil>=5.9.0",
    "python-multipart>=0.0.6",
    "watchdog>=3.0.0"
]
test = [
    "pytest>=8.4.0",
    "pytest-flask>=1.3.0",
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=4.0.0",
    "coverage>=7.6.0",
    "psutil>=5.9.0"
]
lint = [
    "black>=24.0.0",
    "flake8>=7.0.0",
    "flake8-security>=1.7.0",
    "mypy>=1.8.0"
]
security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pip-audit>=2.6.0"
]

[project.urls]
Homepage = "https://github.com/example/flask-hello-world-tutorial"
Documentation = "https://github.com/example/flask-hello-world-tutorial#readme"
Repository = "https://github.com/example/flask-hello-world-tutorial"
Issues = "https://github.com/example/flask-hello-world-tutorial/issues"
Changelog = "https://github.com/example/flask-hello-world-tutorial/releases"

[project.scripts]
flask-tutorial = "src.backend.app:create_app"

[tool.setuptools]
py-modules = []

[tool.setuptools.packages.find]
where = ["src"]
include = ["backend*"]
exclude = ["tests*"]

[tool.setuptools.package-dir]
"" = "src"

# pytest configuration - Comprehensive test execution and coverage settings
[tool.pytest.ini_options]
testpaths = ["tests", "src/backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=json:coverage.json",
    "--cov-fail-under=100",
    "--junit-xml=junit.xml",
    "--html=pytest_report.html",
    "--self-contained-html"
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for system workflows", 
    "performance: Performance and benchmark tests",
    "security: Security validation tests",
    "slow: Tests that take longer than 1 second to execute",
    "benchmark: Performance benchmark tests with pytest-benchmark"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
minversion = "6.0"
timeout = 300

# Black code formatter configuration - Python code formatting standards
[tool.black]
line-length = 88
target-version = ['py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.pants.d
  | \.pytype
  | \.ruff_cache
  | \.svn
  | \.tox
  | \.venv
  | \.pytest_cache
  | __pycache__
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | venv
)/
'''
force-exclude = '''
/(
  migrations/
  | \.venv/
  | venv/
  | __pycache__/
)/
'''

# mypy static type checker configuration - Optional type safety validation
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "conftest",
    "setup"
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "pytest.*",
    "flask.*",
    "gunicorn.*",
    "psutil.*",
    "dotenv.*"
]
ignore_missing_imports = true

# Coverage configuration - Code coverage measurement and reporting
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "*/build/*",
    "*/dist/*",
    "setup.py",
    "conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
ignore_errors = true
show_missing = true
precision = 2
skip_covered = false
skip_empty = true

[tool.coverage.html]
directory = "htmlcov"
title = "Flask Tutorial Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"
pretty_print = true

# Bandit security linting configuration - Python security analysis
[tool.bandit]
exclude_dirs = [
    "tests",
    "venv",
    ".venv",
    "env",
    "build",
    "dist",
    "__pycache__",
    ".git",
    ".pytest_cache",
    "htmlcov"
]
skips = [
    "B101",  # Skip assert_used test
    "B601"   # Skip shell injection test for subprocess usage
]

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests/*.py"]

# Flake8 alternative configuration - Python linting rules
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # Whitespace before ':' (conflicts with black)
    "E501",  # Line too long (handled by black)
    "W503",  # Line break before binary operator (conflicts with black)
    "W504"   # Line break after binary operator (conflicts with black)
]
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    "*.egg-info",
    ".venv",
    "venv",
    ".pytest_cache",
    "htmlcov",
    "migrations"
]
per-file-ignores = [
    "__init__.py:F401",  # Unused imports in __init__.py files
    "tests/*.py:S101",   # Use of assert in tests
    "conftest.py:F401,F811"  # Unused imports and redefinition in conftest
]
max-complexity = 10
docstring-convention = "google"

# Additional tool configurations for development workflow efficiency

# isort import sorting configuration - Python import organization
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src", "backend"]
known_third_party = ["flask", "pytest", "gunicorn", "dotenv"]
skip = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    "*.egg-info",
    ".venv",
    "venv",
    ".pytest_cache",
    "htmlcov"
]

# pip-tools configuration - Dependency management
[tool.pip-tools]
generate-hashes = true
index-url = "https://pypi.org/simple/"
extra-index-url = []
trusted-host = []
find-links = []
no-index = false
quiet = false

# Development tool integration scripts
[tool.setuptools_scm]
write_to = "src/backend/_version.py"
version_scheme = "release-branch-semver"